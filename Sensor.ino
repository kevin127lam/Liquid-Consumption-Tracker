#include <Adafruit_SSD1306.h>
#include <splash.h>
#include <Adafruit_GFX.h>
#include <Adafruit_GrayOLED.h>
#include <Adafruit_SPITFT.h>
#include <Adafruit_SPITFT_Macros.h>
#include <gfxfont.h>
#include "arduino_secrets.h"
#include <Wire.h>

#define SCREEN_WIDTH 128 // OLED display width, in pixels
#define SCREEN_HEIGHT 64 // OLED display height, in pixels
#define PI 3.1415926535897932384626433832795

// Declaration for an SSD1306 display connected to I2C (SDA, SCL pins)
Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, -1);
/* 
  Sketch generated by the Arduino IoT Cloud Thing "LCT"
  https://create.arduino.cc/cloud/things/2d9915c2-3202-4f3c-a313-ea8518deba17 

  Arduino IoT Cloud Variables description

  The following variables are automatically generated and updated when changes are made to the Thing

  float distance;
  float volume;

  Variables which are marked as READ/WRITE in the Cloud Thing will also have functions
  which are called when their values are changed from the Dashboard.
  These functions are generated with the Thing and added at the end of this sketch.
*/

#include "thingProperties.h"

// Array to store incoming serial data
unsigned char data_buffer[4] = {0};

// Variable to hold checksum
unsigned char CS;

void setup() {
  // This delay gives the chance to wait for a Serial Monitor without blocking if none is found
  delay(1500); 

  // Defined in thingProperties.h
  initProperties();

  // Set up serial monitor
  Serial.begin(115200);
  // Set up software serial port
  Serial1.begin(9600);

  // Connect to Arduino IoT Cloud
  ArduinoCloud.begin(ArduinoIoTPreferredConnection);

  // set up the screen information
   if (!display.begin(SSD1306_SWITCHCAPVCC, 0x3C)) { // Address 0x3D for 128x64
    Serial.println(F("SSD1306 allocation failed"));
    for (;;);
  }
  delay(2000);
  display.clearDisplay();
  display.setTextSize(1);
  display.setTextColor(WHITE);
  
  /*
     The following function allows you to obtain more information
     related to the state of network and IoT Cloud connection and errors
     the higher number the more granular information youâ€™ll get.
     The default is 0 (only errors).
     Maximum is 4
 */
  setDebugMessageLevel(2);
  ArduinoCloud.printDebugInfo();
}

//print the volume values
void printValues(float lastVolume, float volume, String change) {
  // Print to Serial Monitor
  Serial.print("Volume changed: ");
  Serial.print(lastVolume);
  Serial.print(" mL -> ");
  Serial.print(volume);
  Serial.print(" mL ");

  if (change != "") {
    Serial.println("(" + change + ")");
  } else {
    Serial.println();
  }

  // Update OLED display
  display.clearDisplay();
  display.setCursor(0, 10);
  display.print("Volume: ");
  display.print(lastVolume);
  display.print(" mL -> ");
  display.print(volume);
  display.println(" mL");

  if (change != "") {
    display.println("(" + change + ")");
  }

  display.display(); // Show the updated text
}

void loop() {
  ArduinoCloud.update();

  static float lastVolume = -1; // Store the last volume value
  const float THRESHOLD = 10.0; // Minimum change required to print Increase/Decrease

  // Run if data available
  if (Serial1.available() > 0) {
    // Check for packet header character 0xff
    if (Serial1.read() == 0xff) {
      // Insert header into array
      data_buffer[0] = 0xff;
      // Read remaining 3 characters of data and insert into array
      for (int i = 1; i < 4; i++) {
        data_buffer[i] = Serial1.read();
      }

      // Compute checksum
      CS = data_buffer[0] + data_buffer[1] + data_buffer[2];

      // If checksum is valid, compose distance from data
      if (data_buffer[3] == CS) {
        distance = (data_buffer[1] << 8) + data_buffer[2];

        // Calculate volume
        volume = PI * (4 * 4) * (19 - (distance / 10));

        // Only update if volume has changed
        if (volume != lastVolume) {
          float diff = volume - lastVolume;
          String change = "";

          if (lastVolume != -1) { // Ensure we don't compare on first run
            if (diff > THRESHOLD) {
              change = "Increase";
            } else if (diff < -THRESHOLD) {
              change = "Decrease";
            }
          }

          // Only print if the change is significant
          if (change != "") {
            printValues(lastVolume, volume, change);
          }

          lastVolume = volume; // Update last volume
        }
      }
    }
  }
}


/*
  Since Volume is READ_WRITE variable, onVolumeChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onVolumeChange()  {
  // Add your code here to act upon Volume change
}
